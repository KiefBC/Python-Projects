Here is a tip for anyone reading this. This will make your life so much easier in the future with error handling.

except Exception as e:
    print(f"The following error occurred : {e}")

Enjoy. This will accept any Exception into {e} and will print out the exact exception into the string.
Even though we didn't specify which one. Amazing. Simply amazing.

    # Capture the input (e.g. 2) as an integer value
index = int(input())

# Get a list of all the exceptions returned from calling the builtin function
all_exceptions = dir(locals()['__builtins__'])

# Print the exception with the index provided as input
print(all_exceptions[index])

Just learned that we can use isalpha() to check if strings contain all letters. interdasting.

{printing} the local {dictionary} by {grabbing} and {joining} msg_ + msg_index (msg_10 or msg_11 or msg_12)
print(locals().get("".join(("msg_", str(msg_index)))))  # a string to show in each iteration

# first {n} is the number of times we loop
for i in range(0, n):
    ele = int(input())
    lst.append(ele)

With % character, we could control the number of decimal places, for example, reduce their number to 3 or 2:
print('%.3f' % (11/3))  # 3.667
print('%.2f' % (11/3))  # 3.67
print(f'%.{b}f' % (a))

If you imagine a room where 3 is on the ceiling and 2 is on the floor. 2.5 would fit in the middle.
Floor division means the “//“ will always take the floor or the lower number.

Find the most common repeated substring in a string:
str = 'TheGoodSoldierSvejkTheOldManandtheSea'
print([x for x in str if str.count(x) == max([str.count(_) for _ in str])])

def clean_str():
    global shit
    garbage = ["\n", "-", ".", "'", " ", ","]
    if any([_ in shit for _ in garbage]):
        for trash in garbage:
            if trash in shit:
                shit = shit.replace(trash, "")

shit = '''- Please, lighten your soul.

- It happened by itself, Pastor. I had a friend. He betrayed me. I had a favorite. She recanted. I'm flying light.'''
clean_str()
print(shit)
result = shit.lower().count('el') + shit.lower().count('le')
print(result)

# how to hide elements of a word using a random choice method on a list of strings
hangman_word = random.choice(words)  # randomising our choice
first_letters = hangman_word[0:3]  # selecting the first index up to the third index
hidden_letters = ("-" * (len(hangman_word) - 3))  # replacing the last 3 words with ---
obfuscate = first_letters + hidden_letters  # wooaaaah coding betty, wooooah
